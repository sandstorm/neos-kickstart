prototype(MyVendor.AwesomeNeosProject:Component.Button) < prototype(Neos.Fusion:Component) {
    text = ''
    href = ''
    isExternalLink = false
    type = ''
    size = ''
    textAlign = ''

    @propTypes {
        @strict = true
        text = ${PropTypes.string}
        href = ${PropTypes.string}
        type = ${PropTypes.oneOf(['solid', 'outline', 'outline-transparent', 'link'])}
        size = ${PropTypes.oneOf(['standard', 'large', 'small'])}
        isExternalLink = ${PropTypes.boolean}
        textAlign = ${PropTypes.string}
    }

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        _target = ${props.isExternalLink ? '_blank' : null}
        _buttonHasNoTextClassName = ${props.text ? '' : 'button--square'}
        _buttonTypeClassName = ${'button--' + props.type}
        _buttonSizeClassName = ${'button--size-' + props.size}
        _inBackend = ${node.context.inBackend && node.context.currentRenderingMode.edit}
        _textAlignClass = MyVendor.AwesomeNeosProject:Utility.TextAlign {
            textAlign = ${props.textAlign}
        }

        renderer = afx`
            <MyVendor.AwesomeNeosProject:Utility.ContentWidth class={AtomicFusion.classNames('button-outer' , props._textAlignClass)}>
                <Neos.Fusion:Tag
                    tagName={(props.href && !props._inBackend) ? 'a' : 'div'}
                    attributes.class={AtomicFusion.classNames('button', props._buttonTypeClassName, props._buttonSizeClassName, props._buttonHasNoTextClassName)}
                    attributes.href={props.href ? props.href : null}
                    attributes.target={props.isExternalLink ? props._target : null}
                >
                    {props.text}
                </Neos.Fusion:Tag>
            </MyVendor.AwesomeNeosProject:Utility.ContentWidth>
        `
    }
}
