prototype(MyVendor.AwesomeNeosProject:Component.Image) < prototype(Neos.Fusion:Component) {
    alternativeText = ''
    imageSource = null
    width = ''
    textWrap = ''
    inBackend = ${node.context.inBackend}

    srcSet = ${['320w', '600w', '800w', '1200w']}

    sizes = ${[
        '(min-width: 1400px) 1200px',
        '(min-width: 996px) 996px',
        '(min-width: 768px) 768px',
        '(min-width: 500px) 500px',
        '(min-width: 374px) 374px',
        '100vw'
    ]}

    formats = ${['webp', 'png']}

    @propTypes {
        @strict = true
        imageSource = ${PropTypes.any}
        alternativeText = ${PropTypes.string}
        width = ${PropTypes.string}
        textWrap = ${PropTypes.string}
        inBackend = ${PropTypes.boolean}

        srcSet = ${PropTypes.arrayOf(PropTypes.string)}
        sizes = ${PropTypes.arrayOf(PropTypes.string)}
        formats = ${PropTypes.arrayOf(PropTypes.string)}
    }

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        _showPlaceholder = ${props.inBackend && !props.imageSource}
        _textWrapClassName = ${props.textWrap ?  'image--text-wrap-' + props.textWrap : ''}
        _widthClassName = ${props.width ?  'image--' + props.width + '-sized': ''}
        _widthClassName.@if.onlyWithTextWrap = ${props.textWrap}

        renderer = afx`
            <div class={AtomicFusion.classNames('image' , props._widthClassName, props._textWrapClassName)}>
                <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder @if.showPlaceholder={props._showPlaceholder}/>
                <Sitegeist.Kaleidoscope:Picture
                    class="image"
                    alt={props.alternativeText}
                    imageSource={props.imageSource}
                    srcset={props.srcSet}
                    sizes={props.sizes}
                    formats={props.formats}
                    renderDimensionAttributes={false}
                    @if.showImage={!props._showPlaceholder}
                />
            </div>
        `
    }
}
