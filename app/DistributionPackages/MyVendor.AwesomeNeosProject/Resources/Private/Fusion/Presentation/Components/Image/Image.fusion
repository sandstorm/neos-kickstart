prototype(MyVendor.AwesomeNeosProject:Component.Image) < prototype(Neos.Fusion:Component) {
    alternativeText = ''
    imageDescription = ''
    imageSource = null
    href = ''
    isExternalLink = false

    inBackend = ${node.context.inBackend}

    // these should match Settings.Media.yaml
    srcSet = ${['320w', '600w', '800w', '1200w']}

    // This is only for full-width images!!
    // For images displayed at smaller sizes, you MUST OVERRIDE THIS!!
    sizes = ${[
    '(min-width: 1400px) 1200px',
    '(min-width: 996px) 996px',
    '(min-width: 768px) 768px',
    '(min-width: 500px) 500px',
    '(min-width: 374px) 374px',
    '100vw'
    ]}

    formats = ${['webp', 'jpg']}

    @propTypes {
        @strict = true
        imageSource = ${PropTypes.any}
        alternativeText = ${PropTypes.string}
        imageDescription = ${PropTypes.string}
        href = ${PropTypes.string}
        isExternalLink = ${PropTypes.boolean}

        inBackend = ${PropTypes.boolean}

        srcSet = ${PropTypes.arrayOf(PropTypes.string)}
        sizes = ${PropTypes.arrayOf(PropTypes.string)}
        formats = ${PropTypes.arrayOf(PropTypes.string)}
    }

    renderer = Neos.Fusion:Tag {
        tagName = ${(props.href && !props.inBackend) ? 'a' : 'div'}
        attributes.class = ${AtomicFusion.classNames('image')}
        attributes.href = ${props.href ? props.href : null}
        attributes.target = ${props.isExternalLink ? '_blank' : null}

        content = afx`
            <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder @if.showPlaceholder={props.inBackend && !props.imageSource}/>
            <!-- we load all images lazily by default, as the browser is really good at finding what is
            needed above the fold -->
            <Sitegeist.Kaleidoscope:Picture
                alt={props.alternativeText}
                imageSource={props.imageSource}
                srcset={props.srcSet}
                sizes={props.sizes}
                formats={props.formats}
                renderDimensionAttributes={false}
                loading={"lazy"}
                @if.showImage={props.imageSource}
            />
            <span @if.imageDescription={props.imageDescription} class="image__description">{props.imageDescription}</span>
        `
    }
}
