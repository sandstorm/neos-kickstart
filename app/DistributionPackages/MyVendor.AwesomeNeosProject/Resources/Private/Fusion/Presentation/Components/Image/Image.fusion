prototype(MyVendor.AwesomeNeosProject:Component.Image) < prototype(Neos.Fusion:Component) {
    imageSource = null
    // Needed when rendering svg or gifs
    imageUri = ''
    fileExtension = ''
    alternativeText = ''
    imageDescription = ''
    href = ''
    isExternalLink = false
    loadEager = false
    // If set to false we prevent this component from rendering a image placeholder in backend when no image is set
    showImagePlaceholder = true
    contentWidth = null
    @context.contentWidth = ${this.contentWidth}
    class = ''

    // The possible image sizes we are using here are determined empirically, so
    // f.e. for a 4column Blog Overview page, we need a rendering bigger than 350 px (as the breakpoint
    // is > 1400px). That's why we use the minimum size of 370 px to have some buffer here.
    // These should match Settings.Media.yaml
    srcSet = ${['370w', '600w', '800w', '1200w', '1600w']}

    // This is only for full-width images!!
    // For images displayed at smaller sizes, you MUST OVERRIDE THIS!!
    sizes = Neos.Fusion:Case {
        // Keep contentWidth checks in sync with MyVendor.AwesomeNeosProject:Mixin.ContentWidth.yaml
        // default = 1400px
        contentWidthDefault {
            condition = ${contentWidth == ''}
            renderer =  ${[
                '(min-width: 1400px) 1400px',
                '(min-width: 1200px) 1200px',
                '(min-width: 996px) 996px',
                '(min-width: 768px) 768px',
                '(min-width: 500px) 500px',
                '(min-width: 370px) 370px',
                '100vw'
            ]}
        }
        // small = 800px
        contentWidthSmall {
            condition = ${contentWidth == 'small'}
            renderer =  ${[
                '(min-width: 800px) 800px',
                '(min-width: 500px) 500px',
                '(min-width: 370px) 370px',
                '100vw'
            ]}
        }
        default {
            condition = true
            renderer = ${[
                '(min-width: 1600px) 1600px',
                '(min-width: 1200px) 1200px',
                '(min-width: 996px) 996px',
                '(min-width: 768px) 768px',
                '(min-width: 500px) 500px',
                '(min-width: 370px) 370px',
                '100vw'
            ]}
        }
    }

    formats = ${['webp', 'jpg']}

    @propTypes {
        @strict = true
        imageSource = ${PropTypes.any}
        imageUri = ${PropTypes.string}
        fileExtension = ${PropTypes.string}
        alternativeText = ${PropTypes.string}
        imageDescription = ${PropTypes.string}
        href = ${PropTypes.string}
        isExternalLink = ${PropTypes.boolean}
        loadEager = ${PropTypes.boolean}
        showImagePlaceholder = ${PropTypes.boolean}
        contentWidth = ${PropTypes.oneOf([null, '', 'small', 'large', 'full'])}
        srcSet = ${PropTypes.arrayOf(PropTypes.string)}
        sizes = ${PropTypes.arrayOf(PropTypes.string)}
        formats = ${PropTypes.arrayOf(PropTypes.string)}
        class = ${PropTypes.string}
    }

    renderer = Neos.Fusion:Tag {
        @if.showImage = ${props.imageSource || props.showImagePlaceholder}

        _inBackend = ${node.context.inBackend && node.context.currentRenderingMode.edit}
        tagName = ${(props.href && !this._inBackend) ? 'a' : 'div'}
        attributes.class = ${AtomicFusion.classNames('image', props.class)}
        attributes.href = ${props.href ? props.href : null}
        attributes.target = ${props.isExternalLink ? '_blank' : null}

        content = Neos.Fusion:Case {
            gifOrSvg {
                // WORKAROUND for crashing animted gifs
                // it seems that if you throw a big animted gif to vips it needs a lot of resources and blocks
                // the php process for a very long time with high cpu utilization.
                // Thats why we do not touch gifs and just output them without any processing.
                // Also added svgs cause they need no different sizes.
                condition = ${props.fileExtension == 'gif' || props.fileExtension == 'svg'}
                renderer = afx`
                    <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder @if.showPlaceholder={props.showImagePlaceholder && props._inBackend && !props.imageUri}/>
                    <img src={props.imageUri} alt={props.alternativeText} loading={props.loadEager ? 'eager' : 'lazy'} />
                    <MyVendor.AwesomeNeosProject:Component.Image.Description imageDescription={props.imageDescription} />
                `
            }

            default {
                condition = true
                renderer = afx`
                    <MyVendor.AwesomeNeosProject:Component.ImagePlaceholder @if.showPlaceholder={props.showImagePlaceholder && props._inBackend && !props.imageSource}/>
                    <!-- we load all images lazily by default, as the browser is really good at finding what is
                    needed above the fold -->
                    <Sitegeist.Kaleidoscope:Picture
                        @if.showImage={props.imageSource}
                        alt={props.alternativeText}
                        imageSource={props.imageSource}
                        srcset={props.srcSet}
                        sizes={props.sizes}
                        formats={props.formats}
                        renderDimensionAttributes={false}
                        loading={props.loadEager ? 'eager' : 'lazy'}
                    />
                    <MyVendor.AwesomeNeosProject:Component.Image.Description imageDescription={props.imageDescription} />
                `
            }
        }
    }
}

prototype(MyVendor.AwesomeNeosProject:Component.Image.Description) < prototype(Neos.Fusion:Component) {
    imageDescription = ''
    @propTypes {
        @strict = true
        imageDescription = ${PropTypes.string}
    }

    renderer = afx`
        <span @if.imageDescription={props.imageDescription} class="image__description">{props.imageDescription}</span>
    `
}
